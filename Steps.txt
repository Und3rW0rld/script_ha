Instructivo para correr el script de HA:

Se deben ejecutar los archivos de las carpetas en el siguiente orden:


1. -> States ( fine ) Prueba -> SELECT * FROM academic_history.state;

2. -> Municipality ( fine ) -> SELECT * FROM academic_history.municipality;

3. -> SchoolType ( fine ) -> SELECT * FROM academic_history.school_type;

4. -> AdmissionAccess ( fine ) -> SELECT * FROM academic_history.admission_access; 

5. -> AdmissionSubaccess ( fine ) Note: code was re-generated by myself -> SELECT * FROM academic_history.admission_subaccess;

6. -> AdmissionStartNode ( fine ) revisar el tema de la asignación de códigos (Ya que hay algunos códigos repetidos cuando deberían ser únicos) -> SELECT * FROM academic_history.admission_start_node;

7. -> StudyLevel ( fine ) -> SELECT * FROM academic_history.study_level;

8. -> CurricularAreas ( No se envió la data ) -> SELECT * FROM academic_history.curricular_area; ( Se crea un área curricular comodín para usar en la entidad de programas curriculares hasta tener la data actual )

9. -> CurricularPrograms ( depende de areas curriculares ) -> SELECT * FROM academic_history.curricular_program;

10. -> UniversitySite ( fine ) -> SELECT * FROM academic_history.university_site;

11. -> Faculty ( fine ) -> SELECT * FROM academic_history.faculty;

12. -> Uab ( los códigos de no registra en las facultades ) -> SELECT * FROM academic_history.uab;
 	
13. -> StudyPlan ( fine ) -> SELECT * FROM academic_history.study_plan;

14. -> Student ( fine ) incluye secur_person secur_user_level_role secur_user ( Se ejecuta el main.py ) -> SELECT * FROM academic_history.student; SELECT * FROM "security".secur_user; SELECT * FROM "security".secur_role; SELECT * FROM "security".secur_person; NOTA IMPORTANTE: Para los documentos en el trans_type_legal_id se debe crear un registro de la siguiente forma INSERT INTO transversal.trans_type_legal_id
  ("name", abbreviation, is_of_legal_age, created_by, updated_by)
VALUES
  ('OTRO', 'OT', false, 'e11a3bf5-3ea4-44bd-8aae-0b67beb67b1d'::uuid, 'e11a3bf5-3ea4-44bd-8aae-0b67beb67b1d'::uuid); 

Nota: Hay varios estudiantes sin username ( campo obligatorio para poder crear el usuario ). Estos fueron extraidos en un archivo .txt con la data.


15. -> StudentAdmission ( fine ) No hay total_standart_score ->  SELECT * FROM academic_history.student_admission;

16. -> AcademicFile ( fine ) I guess -> SELECT * FROM academic_history.academic_file;

17. -> Subject ( fine ) No exite campo para relacionar la UAB con el subject, por esto se utiliza un valor by default -> SELECT * FROM academic_history.subject;

18. -> Typology ( fine ) de archivos de notas -> SELECT * FROM academic_history.typology;

19. -> StudyPlanSubject ( fine ) de archivos de notas -> SELECT * FROM  academic_history.study_plan_subject;

20. -> Period ( fine ) de archivo de notas -> SELECT * FROM academic_history.period;

21. -> StudyPlanSubjectPeriod ( fine ) verificar el manejo de los grupos -> SELECT * FROM academic_history.study_plan_subject_period;

22. -> AcademicFilePeriod ( fine ) I guess ( se asumen varios creditos como 0 ) -> Esto se ejecuta en el siguiente step -> Se ejecuta despues

23. -> Academic File Period & BlockType & Academic File Block  ( Las 3 se ejecutan juntas ) -> SELECT * FROM academic_history.block_type;

SELECT * FROM academic_history.academic_file_period;

SELECT * FROM academic_history.block_type;

SELECT * FROM academic_history.academic_file_block;

24. -> AcademicFileRecord No hay archivos .csv para extraer esta data, por lo que se adjunta el archivo .py con la lógica para crear las queries.
